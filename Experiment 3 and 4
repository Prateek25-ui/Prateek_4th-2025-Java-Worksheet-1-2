3rd :
// Employee.java
public class Employee {

    // Instance variables
    String name;
    double salary;

    // Default constructor
    public Employee() {
        name = "Unknown";
        salary = 0;
    }

    // Overloaded constructor to initialize name with a default salary
    public Employee(String name) {
        this.name = name;
        this.salary = 50000; // default salary if only name is given
    }

    // Method to display employee details
    public void DisplayEmployeeDetails() {
        System.out.println("Employee Name: " + name);
        System.out.println("Employee Salary: " + salary);
    }

    // Main method to test the Employee class
    public static void main(String[] args) {
        // Creating an employee with the default constructor
        Employee employee1 = new Employee();
        employee1.DisplayEmployeeDetails();

        // Creating an employee with a custom name and default salary
        Employee employee2 = new Employee("John Doe");
        employee2.DisplayEmployeeDetails();
    }
}
4th:
import java.util.Scanner;

public class BasicBankingSystem {
    private double[] accountBalances;
    private String[] transactionIDs;

    public BasicBankingSystem(double[] accountBalances, String[] transactionIDs) {
        this.accountBalances = accountBalances;
        this.transactionIDs = transactionIDs;
    }

    // Method to calculate the average account balance
    public double calculateAverageBalance() throws ArithmeticException {
        if (accountBalances.length == 0) {
            throw new ArithmeticException("No account holders available to calculate average balance.");
        }
        double totalBalance = 0;
        for (double balance : accountBalances) {
            totalBalance += balance;
        }
        return totalBalance / accountBalances.length;
    }

    // Method to verify transaction ID
    public void verifyTransactionID(int index) throws ArrayIndexOutOfBoundsException {
        if (index < 0 || index >= transactionIDs.length) {
            throw new ArrayIndexOutOfBoundsException("Invalid transaction ID index: " + index);
        }
        System.out.println("Transaction ID at index " + index + ": " + transactionIDs[index]);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Sample account balances and transaction IDs
        double[] accountBalances = {1000.50, 2500.75, 300.00, 1500.25};
        String[] transactionIDs = {"TXN001", "TXN002", "TXN003", "TXN004"};

        BasicBankingSystem bankingSystem = new BasicBankingSystem(accountBalances, transactionIDs);

        // Calculate average balance with exception handling
        try {
            double averageBalance = bankingSystem.calculateAverageBalance();
            System.out.println("Average Account Balance: " + averageBalance);
        } catch (ArithmeticException e) {
            System.out.println("Error: " + e.getMessage());
        }

        // Verify transaction IDs with exception handling
        System.out.print("Enter the index of the transaction ID to verify (0 to " + (transactionIDs.length - 1) + "): ");
        int index = scanner.nextInt();

        try {
            bankingSystem.verifyTransactionID(index);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: " + e.getMessage());
        }

        scanner.close();
    }
}
